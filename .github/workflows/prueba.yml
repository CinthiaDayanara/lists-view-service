name: Deploy to AWS EC2 main

on:
  push:
    branches:
      - master  # Cambia a "test" si deseas que se ejecute en ot

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del cÃ³digo
        uses: actions/checkout@v2

      - name: Iniciar sesiÃ³n en Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Construir y subir imagen a Docker Hub
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lists-view-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/lists-view-service:latest

      - name: Conectar a AWS EC2 y actualizar contenedor
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ðŸš€ Actualizando microservicio en AWS EC2.."
            
            # Instalar Docker si no estÃ¡ instalado
            if ! command -v docker &> /dev/null; then
              echo "ðŸ”§ Docker no estÃ¡ instalado. Instalando Docker..."
              sudo yum update -y
              sudo yum install docker -y
              sudo usermod -aG docker ec2-user
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "âœ… Docker ya estÃ¡ instalado."
            fi

            # Crear un usuario si no existe
            if ! id -u ${USER} &>/dev/null; then
              echo "ðŸ‘¤ Usuario no encontrado, creando usuario..."
              sudo useradd -m -s /bin/bash ${USER}
            else
              echo "âœ… El usuario ya existe."
            fi

            # Detener y eliminar el contenedor si ya existe
            if sudo docker ps -a --format '{{.Names}}' | grep -q lists-view-service_container; then
              echo "ðŸ›‘ Deteniendo y eliminando contenedor existente..."
              sudo docker stop lists-view-service_container
              sudo docker rm lists-view-service_container
            fi

            # Limpiar imÃ¡genes antiguas
            sudo docker image prune -af || true

            # Descargar la Ãºltima versiÃ³n de la imagen desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lists-view-service:latest

            # Ejecutar el nuevo contenedor
            sudo docker run -d --name lists-view-service_container \
              --env DB_USER=${{ secrets.DB_USER }} \
              --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --env DB_SERVER=${{ secrets.DB_HOST }} \
              --env DB_NAME=${{ secrets.DB_NAME }} \
              -p 5002:5002 \
              ${{ secrets.DOCKER_USERNAME }}/lists-view-service:latest

            echo "âœ… Despliegue completado con Ã©xito."

        